services:
  reverse-proxy:
    image: traefik:v3.1
    container_name: "traefik"
    command: 
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false" # avoid unnecessary container exposed
      - "--entryPoints.web.address=:80" 
    ports:
      - "80:80" # HTTP port
      - "8080:8080" # Web UI (enabled by --api.insecure=true)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - backend
      - rabbitmq_network
      
  db: 
    image: postgres:16-alpine
    restart: always 
    env_file:
      - .env
      - .default_env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      PGUSER: "postgres"
    networks:
      - backend
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD",  "pg_isready", "-U", "${DB_USER}", "-d", "${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  background_db:
    image: postgres:16-alpine
    restart: always 
    env_file:
      - .env
      - .default_env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${BACKGROUND_DB_NAME}
      PGUSER: "postgres"
    networks:
      - backend
    volumes:
      - background_postgres_data:/var/lib/postgresql/data    
    healthcheck:
      test: ["CMD",  "pg_isready", "-U", "${DB_USER}", "-d", "${BACKGROUND_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  web: 
    build:
      context: ./
    # ports:
      # - 8088:8080
    env_file:
      - .env
      - .default_env
    environment:
      - URL_DSN=postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable
      - RIVER_DSN=postgres://${DB_USER}:${DB_PASSWORD}@${BACKGROUND_DB_HOST}:${DB_PORT}/${BACKGROUND_DB_NAME}?sslmode=disable
    depends_on:
      db:
        condition: service_healthy
      background_db:
        condition: service_healthy
      # cache:
      #   condition: service_started
      rabbitmq:
        condition: service_started
      redis_1:
        condition: service_started
      redis_2:
        condition: service_started
      redis_3:
        condition: service_started
      redis_4:
        condition: service_started
      redis_5:
        condition: service_started
      redis_6:
        condition: service_started
      redis_7:
        condition: service_started
      redis_8:
        condition: service_started
      redis_9:
        condition: service_started
    networks:
      backend:
      rabbitmq_network:
      redis_cluster_net:
        # ipv4_address: 173.18.0.14
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`localhost`)"
      - "traefik.http.services.web.loadbalancer.server.port=8080"

  fraud-detect:
    build:
      context: ./fraud-detection
      dockerfile: Dockerfile
    environment:
      - URL_DSN=postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable
    networks:
      - backend
      - rabbitmq_network
    env_file:
      - .env
      - .default_env
    depends_on:
      rabbitmq:
        condition: service_started
      db:
        condition: service_healthy

  # cache: 
  #   image: redis:latest
  #   container_name: redis_cache
  #   ports:
  #     - "6379:6379"
  #   command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
  #   volumes:
  #     - redis_data:/data
  #     - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
  #   networks:
  #     - backend
  
  background_worker:
    build:
      context: ./
    env_file:
      - .env
      - .default_env
    environment:
      - URL_DSN=postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable
      - RIVER_DSN=postgres://${DB_USER}:${DB_PASSWORD}@${BACKGROUND_DB_HOST}:${DB_PORT}/${BACKGROUND_DB_NAME}?sslmode=disable
    depends_on:
      db:
        condition: service_healthy
      background_db:
        condition: service_healthy
    command: ["./worker"]
    networks:
      - backend
    
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    ports:
    - 8081:8080
    privileged: true
    devices:
      - /dev/kmsg
    volumes:
    - /:/rootfs:ro
    - /var/run:/var/run:ro
    - /sys:/sys:ro
    - /var/lib/docker/:/var/lib/docker:ro
    - /dev/disk/:/dev/disk:ro
    - /var/run/docker.sock:/var/run/docker.sock:ro
    - /etc/machine-id:/etc/machine-id:ro
    - /var/lib/dbus/machine-id:/var/lib/dbus/machine-id:ro
  
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - rabbitmq_network
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  redis_1:
    image: "redis:latest"
    container_name: redis_1
    ports:
      - "6380:6379"
    volumes:
      - redis_1_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      redis_cluster_net:
        ipv4_address: 173.18.0.2

  redis_2:
    image: "redis:latest"
    container_name: redis_2
    ports:
      - "6381:6379"
    volumes:
      - redis_2_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      redis_cluster_net:
        ipv4_address: 173.18.0.3

  redis_3:
    image: "redis:latest"
    container_name: redis_3
    ports:
      - "6382:6379"
    volumes:
      - redis_3_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      redis_cluster_net:
        ipv4_address: 173.18.0.4

  redis_4:
    image: "redis:latest"
    container_name: redis_4
    ports:
      - "6383:6379"
    volumes:
      - redis_4_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      redis_cluster_net:
        ipv4_address: 173.18.0.5

  redis_5:
    image: "redis:latest"
    container_name: redis_5
    ports:
      - "6384:6379"
    volumes:
      - redis_5_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      redis_cluster_net:
        ipv4_address: 173.18.0.6

  redis_6:
    image: "redis:latest"
    container_name: redis_6
    ports:
      - "6385:6379"
    volumes:
      - redis_6_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      redis_cluster_net:
        ipv4_address: 173.18.0.7
  
  redis_7:
    image: "redis:latest"
    container_name: redis_7
    ports:
      - "6386:6379"
    volumes:
      - redis_7_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      redis_cluster_net:
        ipv4_address: 173.18.0.8
  
  redis_8:
    image: "redis:latest"
    container_name: redis_8
    ports:
      - "6387:6379"
    volumes:
      - redis_8_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      redis_cluster_net:
        ipv4_address: 173.18.0.9
    
  redis_9:
    image: "redis:latest"
    container_name: redis_9
    ports:
      - "6388:6379"
    volumes:
      - redis_9_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      redis_cluster_net:
        ipv4_address: 173.18.0.10
  cluster_initiator:
    container_name: cluster_initiator
    build:
      context: redis
      dockerfile: Dockerfile
    tty: true
    depends_on:
      - redis_1
      - redis_2
      - redis_3
      - redis_4
      - redis_5
      - redis_6
      - redis_7
      - redis_8
      - redis_9

    networks:
      redis_cluster_net:
        ipv4_address: 173.18.0.12


  redis_commander:
    image: rediscommander/redis-commander:latest
    container_name: redis_web
    environment:
      REDIS_HOSTS: "local:redis_1:6379,local:redis_2:6379,local:redis_3:6379"
    ports:
      - "5000:8081"
    depends_on:
      - redis_1
      - redis_2
      - redis_3
      - redis_4
      - redis_5
      - redis_6
      - redis_7
      - redis_8
      - redis_9
      - cluster_initiator
    networks:
      redis_cluster_net:
        ipv4_address: 173.18.0.13
volumes:
  postgres_data:
  redis_data:
  background_postgres_data:
  rabbitmq_data:
  redis_1_data: {}
  redis_2_data: {}
  redis_3_data: {}
  redis_4_data: {}
  redis_5_data: {}
  redis_6_data: {}
  redis_7_data: {}
  redis_8_data: {}
  redis_9_data: {}

networks:
  redis_cluster_net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.18.0.0/16

  backend:
    driver: bridge

  rabbitmq_network:
    driver: bridge

