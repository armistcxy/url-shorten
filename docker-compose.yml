services:
  reverse-proxy:
    image: traefik:v3.1
    container_name: "traefik"
    command: 
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false" # avoid unnecessary container exposed
      - "--entryPoints.web.address=:80" 
    ports:
      - "80:80" # HTTP port
      - "8080:8080" # Web UI (enabled by --api.insecure=true)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - backend
      
  db: 
    image: postgres:16-alpine
    restart: always 
    env_file:
      - .env
      - .default_env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      PGUSER: "postgres"
    networks:
      - backend
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD",  "pg_isready", "-U", "${DB_USER}", "-d", "${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
  web: 
    build:
      context: ./
    environment:
      - URL_DSN=postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`localhost`)"
      - "traefik.http.services.web.loadbalancer.server.port=8080"

  
volumes:
  postgres_data:

networks:
  backend: