services:
  reverse-proxy:
    image: traefik:v3.1
    container_name: "traefik"
    command: 
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false" # avoid unnecessary container exposed
      - "--entryPoints.web.address=:80" 
    ports:
      - "80:80" # HTTP port
      - "8080:8080" # Web UI (enabled by --api.insecure=true)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - backend
      - rabbitmq_network
      
  db: 
    image: postgres:16-alpine
    restart: always 
    env_file:
      - .env
      - .default_env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      PGUSER: "postgres"
    networks:
      - backend
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD",  "pg_isready", "-U", "${DB_USER}", "-d", "${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  background_db:
    image: postgres:16-alpine
    restart: always 
    env_file:
      - .env
      - .default_env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${BACKGROUND_DB_NAME}
      PGUSER: "postgres"
    networks:
      - backend
    volumes:
      - background_postgres_data:/var/lib/postgresql/data    
    healthcheck:
      test: ["CMD",  "pg_isready", "-U", "${DB_USER}", "-d", "${BACKGROUND_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  web: 
    build:
      context: ./
    # ports:
    #   - 8080:8080
    env_file:
      - .env
      - .default_env
    environment:
      - URL_DSN=postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable
      - RIVER_DSN=postgres://${DB_USER}:${DB_PASSWORD}@${BACKGROUND_DB_HOST}:${DB_PORT}/${BACKGROUND_DB_NAME}?sslmode=disable
    depends_on:
      db:
        condition: service_healthy
      background_db:
        condition: service_healthy
      cache:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks:
      - backend
      - rabbitmq_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`localhost`)"
      - "traefik.http.services.web.loadbalancer.server.port=8080"

  fraud-detect:
    build:
      context: ./fraud-detection
      dockerfile: Dockerfile
    environment:
      - URL_DSN=postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable
    networks:
      - backend
      - rabbitmq_network
    env_file:
      - .env
      - .default_env
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy

  cache: 
    image: redis:latest
    container_name: redis_cache
    volumes:
      - redis_data:/data
    networks:
      - backend
  
  background_worker:
    build:
      context: ./
    env_file:
      - .env
      - .default_env
    environment:
      - URL_DSN=postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable
      - RIVER_DSN=postgres://${DB_USER}:${DB_PASSWORD}@${BACKGROUND_DB_HOST}:${DB_PORT}/${BACKGROUND_DB_NAME}?sslmode=disable
    depends_on:
      db:
        condition: service_healthy
      background_db:
        condition: service_healthy
    command: ["./worker"]
    networks:
      - backend
    
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    ports:
    - 8081:8080
    privileged: true
    devices:
      - /dev/kmsg
    volumes:
    - /:/rootfs:ro
    - /var/run:/var/run:ro
    - /sys:/sys:ro
    - /var/lib/docker/:/var/lib/docker:ro
    - /dev/disk/:/dev/disk:ro
    - /var/run/docker.sock:/var/run/docker.sock:ro
    - /etc/machine-id:/etc/machine-id:ro
    - /var/lib/dbus/machine-id:/var/lib/dbus/machine-id:ro
  
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - rabbitmq_network
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
volumes:
  postgres_data:
  redis_data:
  background_postgres_data:
  rabbitmq_data:

networks:
  backend:
  rabbitmq_network:
